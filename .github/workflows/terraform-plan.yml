name: terraform-plan

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read

env:
  TF_VERSION: "1.13.0"
  TF_DIR: envs/prod

concurrency:
  group: terraform-plan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ${{ env.TF_DIR }}/.terraform
          key: ${{ runner.os }}-tf-${{ env.TF_VERSION }}-${{ hashFiles(format('{0}/**/*.tf', env.TF_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-tf-${{ env.TF_VERSION }}-

      - name: Install TFLint
        run: |
          curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        run: |
          tflint --init
          tflint

      - name: Run tfsec (container)
        run: |
          docker run --rm -v "$PWD":/src aquasec/tfsec:latest /src

      - name: Terraform test (module)
        working-directory: modules/dns_records
        run: |
          terraform init -input=false
          terraform test

      - name: Validate CF_RECORDS_JSON
        run: |
          python - <<'PY'
          import json, os, sys
          try:
              j = json.loads(os.environ['CF_RECORDS_JSON'])
              assert isinstance(j, list)
          except Exception as e:
              print("CF_RECORDS_JSON invalid:", e)
              sys.exit(1)
          PY
        env:
          CF_RECORDS_JSON: ${{ secrets.CF_RECORDS_JSON }}

      - name: Render auto.tfvars.json
        working-directory: ${{ env.TF_DIR }}
        run: |
          cat > auto.tfvars.json <<'JSON'
          { "zone_id": "${{ secrets.CF_ZONE_ID }}", "records": ${{ secrets.CF_RECORDS_JSON }} }
          JSON

      - name: Terraform fmt
        run: terraform fmt -recursive

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false

      - name: Terraform validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform plan
        working-directory: ${{ env.TF_DIR }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_zone_id: ${{ secrets.CF_ZONE_ID }}
          TF_VAR_records: ${{ secrets.CF_RECORDS_JSON }}
        run: terraform plan -input=false -no-color
